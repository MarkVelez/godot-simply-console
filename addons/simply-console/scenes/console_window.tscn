[gd_scene load_steps=5 format=3 uid="uid://cmrfdlp25wcby"]

[ext_resource type="Script" path="res://addons/simply-console/scripts/command_parser.gd" id="1_oe0g5"]

[sub_resource type="GDScript" id="GDScript_u0mjt"]
resource_name = "console_window"
script/source = "extends Window

# Console node references.
@onready var OutputFieldRef: RichTextLabel = %OutputField
@onready var InputFieldRef: LineEdit = %InputField
@onready var CommandParserRef: Node = $CommandParser

# Response limits
const MAX_RESPONSES: int = 256
const MAX_CHAR_COUNT: int = 8192


func _ready() -> void:
	output_comment(
		\"To see a list of available commands use the 'help' command.\"
	)
	output_comment(
		\"Optionally, use 'help (command)' to get more information about a specific command.\"
	)


func on_close_requested() -> void:
	hide()


func on_output_field_updated() -> void:
	# Cap the amount of responses to not bloat memory
	if (
		OutputFieldRef.get_paragraph_count() - 1 > MAX_RESPONSES
		or OutputFieldRef.get_total_character_count() > MAX_CHAR_COUNT
	):
		OutputFieldRef.call_deferred(\"remove_paragraph\", 1)


func on_input_field_text_submitted(text: String) -> void:
	if text == \"\":
		return
	
	InputFieldRef.clear()
	# Escape bbcode tags to avoid possible issues
	text = escape_bbcode(text)
	# Separate the command name and the arguments
	var SPLIT_TEXT_ := Array(text.split(\" \"))
	var response: String =\\
		CommandParserRef.parse_command(SPLIT_TEXT_.pop_front(), SPLIT_TEXT_)
	
	if not response.is_empty():
		output_text(response)


func escape_bbcode(text: String) -> String:
	return text.replace(\"[\", \"[lb]\")


func output_text(text: String, color := Color.WHITE) -> void:
	if color != Color.WHITE: 
		OutputFieldRef.push_color(color)
	
	OutputFieldRef.push_paragraph(HORIZONTAL_ALIGNMENT_LEFT)
	OutputFieldRef.append_text(text)
	OutputFieldRef.pop_all()


func output_warning(text: String) -> void:
	output_text(text, Color.YELLOW)


func output_error(text: String) -> void:
	output_text(text, Color.RED)


func output_comment(text: String) -> void:
	output_text(text, Color.DARK_GRAY)


func clear_console() -> void:
	OutputFieldRef.clear()
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_opm5p"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6ctxl"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0.133333, 0.133333, 0.133333, 1)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[node name="ConsoleWindow" type="Window"]
title = "Console"
initial_position = 2
size = Vector2i(512, 512)
script = SubResource("GDScript_u0mjt")

[node name="CommandParser" type="Node" parent="."]
script = ExtResource("1_oe0g5")

[node name="ConsolePanel" type="PanelContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="ConsolePanel"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="ConsolePanel/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 8

[node name="OutputField" type="RichTextLabel" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
focus_mode = 2
theme_override_styles/focus = SubResource("StyleBoxEmpty_opm5p")
theme_override_styles/normal = SubResource("StyleBoxFlat_6ctxl")
scroll_following = true
selection_enabled = true

[node name="InputField" type="LineEdit" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
caret_blink = true

[connection signal="close_requested" from="." to="." method="on_close_requested"]
[connection signal="finished" from="ConsolePanel/MarginContainer/VBoxContainer/OutputField" to="." method="on_output_field_updated"]
[connection signal="text_submitted" from="ConsolePanel/MarginContainer/VBoxContainer/InputField" to="." method="on_input_field_text_submitted"]
