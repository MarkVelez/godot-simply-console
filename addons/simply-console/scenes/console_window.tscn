[gd_scene load_steps=4 format=3 uid="uid://cmrfdlp25wcby"]

[sub_resource type="GDScript" id="GDScript_u0mjt"]
resource_name = "console_window"
script/source = "extends Window

# Console node references.
@onready var OutputFieldRef: RichTextLabel = %OutputField
@onready var InputFieldRef: LineEdit = %InputField

# Response limits
const MAX_RESPONSES: int = 128
const MAX_CHAR_COUNT: int = 8192


func _ready() -> void:
	output_text(
		\"To see a list of available commands use the 'help' command.\",
		Color.DARK_GRAY
	)
	output_text(
		\"Optionally, use 'help (command)' to get more information about a specific command.\",
		Color.DARK_GRAY
	)


func on_close_requested() -> void:
	hide()


func on_input_field_text_submitted(text: String) -> void:
	if text == \"\":
		return
	
	InputFieldRef.clear()
	var SPLIT_TEXT_ := Array(text.split(\" \"))
	if SPLIT_TEXT_.size() > 1:
		parse_command(SPLIT_TEXT_.pop_front(), SPLIT_TEXT_)
	else:
		parse_command(SPLIT_TEXT_[0])
	
	# Cap the amount of responses to not bloat memory
	while (
		OutputFieldRef.get_paragraph_count() - 1 > MAX_RESPONSES
		or OutputFieldRef.get_total_character_count() > MAX_CHAR_COUNT
	):
		OutputFieldRef.remove_paragraph(1)


func parse_command(command: String, ARGS_: Array = []) -> void:
	var response
	# Escape bbcode tags to avoid possible issues
	command = escape_bbcode(command)
	
	if not ConsoleDataManager.COMMAND_LIST_.has(command):
		response = \"Command '\" + command + \"' does not exist.\"
		output_text(response)
		return
	
	var TargetRef: Node
	var target = ConsoleDataManager.COMMAND_LIST_[command][\"target\"]
	var type: int = ConsoleDataManager.COMMAND_LIST_[command][\"type\"]
	var method: String = ConsoleDataManager.COMMAND_LIST_[command][\"method\"]
	var METHOD_ARGS_ = ConsoleDataManager.COMMAND_LIST_[command][\"args\"]
	
	match type:
		ConsoleDataManager.CommandType.GLOBAL:
			TargetRef = get_node(\"/root/\" + target)
		
		ConsoleDataManager.CommandType.LOCAL:
			if target == null:
				TargetRef = self
			else:
				TargetRef = get_tree().root.find_child(target, true , false)
	
	# Check if command expects arguments
	if args_optional(METHOD_ARGS_, ARGS_):
		response = TargetRef.call(method)
		if response:
			output_text(response)
		return
	
	if ARGS_.size() > METHOD_ARGS_.size():
		output_text(
			\"Too many arguments for command '\"
			+ command
			+ \"'. Expected \"
			+ str(METHOD_ARGS_.size())
			+ \", but got \"
			+ str(ARGS_.size())
			+ \".\" 
		)
		return
	
	if ARGS_.is_empty() and not METHOD_ARGS_.is_empty():
		output_text(
			\"Too few arguments for command '\"
			+ command
			+ \"'. Expected \"
			+ str(METHOD_ARGS_.size())
			+ \", but got \"
			+ str(ARGS_.size())
			+ \".\" 
		)
		return
	
	var PARSED_ARGS_: Array = parse_args(METHOD_ARGS_, ARGS_)
	if not PARSED_ARGS_.is_empty():
		response = TargetRef.callv(method, PARSED_ARGS_)
		if response:
			output_text(response)
		return


func args_optional(METHOD_ARGS_, ARGS_: Array) -> bool:
	if METHOD_ARGS_ == null:
		return true
	
	if not ARGS_.is_empty():
		return false
	
	for ARG_INFO_ in METHOD_ARGS_:
		if not ARG_INFO_[\"optional\"]:
			return false
	
	return true


func parse_args(METHOD_ARGS_: Array, ARGS_: Array) -> Array:
	var PARSED_ARGS_: Array = []
	var i: int = 0
	var invalidArg: int = 0
	
	for ARG_INFO_ in METHOD_ARGS_:
		var receivedArg: String = ARGS_[i]
		
		match int(ARG_INFO_[\"type\"]):
			TYPE_STRING:
				PARSED_ARGS_.append(receivedArg)
			
			TYPE_INT:
				if receivedArg.is_valid_int():
					PARSED_ARGS_.append(int(receivedArg))
				else:
					invalidArg = i + 1
					break
			
			TYPE_FLOAT:
				if receivedArg.is_valid_float():
					PARSED_ARGS_.append(float(receivedArg))
				else:
					invalidArg = i + 1
					break
		
		if i == ARGS_.size() - 1:
			break
		
		i += 1
		
	if invalidArg > 0:
		output_text(
			\"Invalid type for argument \"
			+ str(invalidArg)
			+ \" expected '\"
			+ type_string(METHOD_ARGS_[i][\"type\"])
			+ \"'.\"
		)
		PARSED_ARGS_.clear()
		return PARSED_ARGS_
	
	return PARSED_ARGS_


func output_text(text: String, color := Color.WHITE) -> void:
	if color != Color.WHITE: 
		OutputFieldRef.push_color(color)
	
	OutputFieldRef.push_paragraph(HORIZONTAL_ALIGNMENT_LEFT)
	OutputFieldRef.append_text(text)
	OutputFieldRef.pop_all()


func escape_bbcode(text: String) -> String:
	return text.replace(\"[\", \"[lb]\")


func clear_console() -> void:
	OutputFieldRef.clear()
"

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_opm5p"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6ctxl"]
content_margin_left = 4.0
content_margin_right = 4.0
bg_color = Color(0.133333, 0.133333, 0.133333, 1)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[node name="ConsoleWindow" type="Window"]
title = "Console"
initial_position = 2
size = Vector2i(512, 512)
script = SubResource("GDScript_u0mjt")

[node name="ConsolePanel" type="PanelContainer" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="ConsolePanel"]
layout_mode = 2
theme_override_constants/margin_left = 8
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 8
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="ConsolePanel/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 8

[node name="OutputField" type="RichTextLabel" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
focus_mode = 2
theme_override_styles/focus = SubResource("StyleBoxEmpty_opm5p")
theme_override_styles/normal = SubResource("StyleBoxFlat_6ctxl")
scroll_following = true
selection_enabled = true

[node name="InputField" type="LineEdit" parent="ConsolePanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
caret_blink = true

[connection signal="close_requested" from="." to="." method="on_close_requested"]
[connection signal="text_submitted" from="ConsolePanel/MarginContainer/VBoxContainer/InputField" to="." method="on_input_field_text_submitted"]
