[gd_scene load_steps=3 format=3 uid="uid://s3sg33uiq718"]

[sub_resource type="GDScript" id="GDScript_ajqs7"]
resource_name = "editor"
script/source = "@tool
extends TabBar

signal changes_made

# Field references
@onready var CommandListRef: OptionButton = %CommandList
@onready var CommandNameRef: LineEdit = %CommandName
@onready var PermissionRef: OptionButton = %PermissionLevel
@onready var CheatsRef: CheckBox = %RequiresCheats
@onready var KeywordRef: CheckBox = %RequiresKeyword
@onready var TargetNameRef: LineEdit = %TargetName
@onready var TargetMethodRef: LineEdit = %TargetMethod

# Command button references
@onready var UpdateCommandRef: Button = %UpdateCommand
@onready var RemoveCommandRef: Button = %RemoveCommand

# Warning label references
@onready var CommandNameWarningRef: Label = %CommandNameWarning
@onready var TargetMethodWarningRef: Label = %TargetMethodWarning

var updatedCommandList: bool = false


func init_editor() -> void:
	update_command_list()
	
	# Add permission levels to option button
	for permission in ConsoleDataManager.PermissionLevel:
		PermissionRef.add_item(permission)


func on_command_list_item_selected(index: int) -> void:
	# New command selected
	if index == 0:
		update_fields()
		UpdateCommandRef.set_text(\"Add Command\")
		RemoveCommandRef.hide()
		return
	
	# Existing command selected
	var commandName: String = CommandListRef.get_item_text(index)
	CommandNameRef.set_text(commandName)
	update_fields(ConsoleDataManager.COMMAND_LIST_[commandName])
	UpdateCommandRef.set_text(\"Edit Command\")
	RemoveCommandRef.show()


func update_command_list() -> void:
	CommandListRef.clear()
	CommandListRef.add_item(\"<new>\")
	
	for command in ConsoleDataManager.COMMAND_LIST_.keys():
		CommandListRef.add_item(command)


func update_fields(COMMAND_INFO_: Dictionary = {}) -> void:
	# Clear input fields
	if COMMAND_INFO_.is_empty():
		CommandNameRef.clear()
		PermissionRef.select(0)
		CheatsRef.set_pressed(false)
		KeywordRef.set_pressed(false)
		TargetNameRef.clear()
		TargetMethodRef.clear()
		return
	
	# Populate input fields
	PermissionRef.select(COMMAND_INFO_[\"minPermission\"])
	CheatsRef.set_pressed(COMMAND_INFO_[\"cheats\"])
	CheatsRef.set_pressed(COMMAND_INFO_[\"requiresKeyword\"])
	TargetNameRef.set_text(COMMAND_INFO_[\"target\"])
	TargetMethodRef.set_text(COMMAND_INFO_[\"method\"])


func on_update_command_pressed() -> void:
	if not validate_data():
		return
	
	var commandName: String = CommandNameRef.get_text()
	
	# Update existing command
	if ConsoleDataManager.COMMAND_LIST_.has(commandName):
		var commandInfo_: Dictionary =\\
			ConsoleDataManager.COMMAND_LIST_[commandName]
		
		commandInfo_[\"target\"] = TargetNameRef.get_text()
		commandInfo_[\"minPermission\"] = PermissionRef.get_selected()
		commandInfo_[\"cheats\"] = CheatsRef.is_pressed()
		commandInfo_[\"requiresKeyword\"] = KeywordRef.is_pressed()
		commandInfo_[\"method\"] = TargetMethodRef.get_text()
		
		CommandListRef.select(0)
		on_command_list_item_selected(0)
		emit_signal(\"changes_made\")
		return
	
	# Add new command
	var commandListName: String =\\
		CommandListRef.get_item_text(CommandListRef.selected)
	ConsoleDataManager.COMMAND_LIST_[commandName] = {}
	var newCommand_: Dictionary =\\
		ConsoleDataManager.COMMAND_LIST_[commandName]
	
	# Check if the command name was changed on an existing command
	if ConsoleDataManager.COMMAND_LIST_.has(commandListName):
		ConsoleDataManager.COMMAND_LIST_.erase(commandListName)
		CommandListRef.remove_item(CommandListRef.selected)
	
	CommandListRef.add_item(commandName)
	newCommand_[\"target\"] = TargetNameRef.get_text()
	newCommand_[\"minPermission\"] = PermissionRef.get_selected()
	newCommand_[\"cheats\"] = CheatsRef.is_pressed()
	newCommand_[\"requiresKeyword\"] = KeywordRef.is_pressed()
	newCommand_[\"method\"] = TargetMethodRef.get_text()
	
	# Clear input fields
	CommandListRef.select(0)
	on_command_list_item_selected(0)
	updatedCommandList = true
	emit_signal(\"changes_made\")


func validate_data() -> bool:
	var commandName: String = CommandNameRef.get_text()
	var commandListName: String =\\
		CommandListRef.get_item_text(CommandListRef.selected)
	var isValid: bool = true
	
	# Check if command name already exist
	if (
		ConsoleDataManager.COMMAND_LIST_.has(commandName)
		and commandName != commandListName
	):
		CommandNameWarningRef.set_text(\"Command already exists.\")
		CommandNameWarningRef.show()
		isValid = false
	
	# Check if command name is empty
	if commandName.is_empty():
		CommandNameWarningRef.set_text(\"Command must have a name.\")
		CommandNameWarningRef.show()
		isValid = false
	
	if isValid:
		CommandNameWarningRef.hide()
	
	# Check if target method is empty
	if TargetMethodRef.text.is_empty():
		TargetMethodWarningRef.show()
		isValid = false
	else:
		TargetMethodWarningRef.hide()
	
	return isValid


func on_remove_command_pressed() -> void:
	ConsoleDataManager.COMMAND_LIST_.erase(
		CommandListRef.get_item_text(CommandListRef.selected)
	)
	
	updatedCommandList = true
	CommandListRef.remove_item(CommandListRef.selected)
	CommandListRef.select(0)
	on_command_list_item_selected(0)
	emit_signal(\"changes_made\")


func on_requires_keyword_toggled(state: bool) -> void:
	TargetNameRef.set_editable(!state)
	TargetNameRef.clear()
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6mtvx"]
content_margin_left = 6.0
content_margin_top = 6.0
content_margin_right = 6.0
content_margin_bottom = 6.0
bg_color = Color(0.187176, 0.187176, 0.187176, 1)
corner_radius_top_left = 3
corner_radius_top_right = 3
corner_radius_bottom_right = 3
corner_radius_bottom_left = 3
corner_detail = 5

[node name="Editor" type="TabBar"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_ajqs7")

[node name="ScrollContainer" type="ScrollContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_vertical = 3

[node name="VBoxContainer" type="VBoxContainer" parent="ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
theme_override_constants/separation = 8

[node name="CommandInfo" type="PanelContainer" parent="ScrollContainer/VBoxContainer"]
layout_mode = 2
focus_mode = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_6mtvx")

[node name="VBoxContainer" type="VBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo"]
layout_mode = 2
theme_override_constants/separation = 8

[node name="List" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "List of all the existing commands.
Selecting an existing command will allow you
to edit it.
Selecting <new> will let you create a new command."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/List"]
layout_mode = 2
size_flags_horizontal = 3
text = "Command List"

[node name="CommandList" type="OptionButton" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/List"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Name" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "The name that will be used to call the command inside of the console."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Name"]
layout_mode = 2
size_flags_horizontal = 3
text = "Command Name"

[node name="CommandName" type="LineEdit" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Name"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
caret_blink = true

[node name="Permission" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "The required permission level needed to be able to use the command."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Permission"]
layout_mode = 2
size_flags_horizontal = 3
text = "Minimum Permission"

[node name="PermissionLevel" type="OptionButton" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Permission"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3

[node name="Cheats" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "Toggle whether the command requires cheats
to be enabed to be used."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Cheats"]
layout_mode = 2
size_flags_horizontal = 3
text = "Requires Cheats"

[node name="RequiresCheats" type="CheckBox" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Cheats"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
text = "On"

[node name="Keyword" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "Toggle whether the command requires a keyword to be used."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Keyword"]
layout_mode = 2
size_flags_horizontal = 3
text = "Requires Keyword"

[node name="RequiresKeyword" type="CheckBox" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Keyword"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
text = "On"

[node name="Target" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "The name of the target node that has the method that the command will call.
Leave empty to use the console directly."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Target"]
layout_mode = 2
size_flags_horizontal = 3
text = "Target Name"

[node name="TargetName" type="LineEdit" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Target"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
caret_blink = true

[node name="Method" type="HBoxContainer" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer"]
layout_mode = 2
tooltip_text = "The method that the command will call."

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Method"]
layout_mode = 2
size_flags_horizontal = 3
text = "Target Method"

[node name="TargetMethod" type="LineEdit" parent="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Method"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
caret_blink = true

[node name="CommandNameWarning" type="Label" parent="ScrollContainer/VBoxContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
theme_override_colors/font_color = Color(1, 1, 0, 1)
text = "Command already exists."

[node name="TargetMethodWarning" type="Label" parent="ScrollContainer/VBoxContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
theme_override_colors/font_color = Color(1, 1, 0, 1)
text = "Command must have a target method."

[node name="HBoxContainer" type="HBoxContainer" parent="ScrollContainer/VBoxContainer"]
layout_mode = 2

[node name="UpdateCommand" type="Button" parent="ScrollContainer/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
text = "Add Command"

[node name="RemoveCommand" type="Button" parent="ScrollContainer/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_horizontal = 3
text = "Remove Command"

[connection signal="item_selected" from="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/List/CommandList" to="." method="on_command_list_item_selected"]
[connection signal="toggled" from="ScrollContainer/VBoxContainer/CommandInfo/VBoxContainer/Keyword/RequiresKeyword" to="." method="on_requires_keyword_toggled"]
[connection signal="pressed" from="ScrollContainer/VBoxContainer/HBoxContainer/UpdateCommand" to="." method="on_update_command_pressed"]
[connection signal="pressed" from="ScrollContainer/VBoxContainer/HBoxContainer/RemoveCommand" to="." method="on_remove_command_pressed"]
